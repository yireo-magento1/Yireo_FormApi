<?php
/**
 * Yireo FormApi
 *
 * @package     Yireo_FormApi
 * @author      Yireo (http://www.yireo.com/)
 * @copyright   Copyright 2015 Yireo (http://www.yireo.com/)
 * @license     Open Source License (OSL v3)
 */

class Yireo_FormApi_Model_Form extends Mage_Core_Model_Abstract
{
    /*
     * SimpleXML-file containing form-definition
     *
     * @var null|SimpleXMLElement
     */
    protected $xml = null;

    /*
     * Array of Yireo_FormApi_Model_Form_Fieldset objects
     *
     * @var array
     */
    protected $fieldsets = array();

    /*
     * Name of this form
     *
     * @var null
     */
    protected $formName = null;

    /*
     * ID of this form
     *
     * @var null
     */
    protected $formId = null;

    /*
     * Data to be used for values of fields
     *
     * @var null
     */
    protected $fieldData = null;

    /*
     * URL to POST this form to
     *
     * @var null
     */
    protected $postUrl = null;

    /*
     * List of features
     *
     * @var array
     */
    protected $features = array();

    /*
     * List of errors generated by a validation returning false
     *
     * @var array
     */
    protected $errors = array();

    /**
     *
     */
    public function __construct()
    {
        parent::__construct();
        $this->xml = new SimpleXMLElement('<form></form>');
    }

    /**
     * @param $file
     * @param string $type
     * @return bool|Yireo_FormApi_Model_Form
     */
    public function loadFile($file, $type = 'design')
    {
        if($type == 'design') {
            $file = Mage::getDesign()->getTemplateFilename($file);
        }

        if(is_readable($file) == false) {
            $this->log('XML-file "'.$file.'" is not readable');
            return false;
        }

        $this->xml = simplexml_load_file($file);
        if($this->xml == false) {
            $this->log('Not a valid XML-document');
            return false;
        }

        if($this->loadXml() == false) {
            $this->log('Failed to load form from XML-document');
            return false;
        }

        return $this;
    }

    /**
     * @return bool
     */
    protected function loadXml()
    {
        if($this->xml['url']) {
            $this->postUrl = $this->xml['url'];
        }

        if($this->xml['name']) {
            $this->formName = $this->xml['name'];
        }

        if($this->xml['id']) {
            $this->formId = $this->xml['id'];
        } else {
            $this->formId = $this->name;
        }

        $this->loadFieldsets();
        $this->loadFeatures();

        return true;
    }

    /**
     *
     */
    protected function loadFieldsets()
    {
        $fieldData = $this->getFieldData();

        foreach($this->xml->fieldset as $fieldsetXml) {

            $fieldset = Mage::getModel('formapi/form_fieldset');
            $fieldset->setForm($this);

            $name = (string)$fieldsetXml['name'];
            $fieldset->setName($name);

            $label = (string)$fieldsetXml['label'];
            $fieldset->setLabel($label);

            foreach($fieldsetXml->field as $fieldXml) {
                $fieldset->addField($fieldXml, $fieldData);
            }

            $this->fieldsets[] = $fieldset;
        }
    }

    /**
     *
     */
    protected function loadFeatures()
    {
        if($this->xml->features) {
            foreach($this->xml->features->children() as $featureName => $featureValue) {
                $name = (string)$featureName;
                $value = (string)$featureValue;
                $this->features[$name] = $value;
            }
        }
    }

    /**
     * @param $name
     * @param $value
     */
    public function setFeature($name, $value)
    {
        $this->features[$name] = $value;
    }

    /**
     * @param $name
     * @return null
     */
    public function getFeature($name)
    {
        if(isset($this->features[$name])) {
            return $this->features[$name];
        } else {
            return null;
        }
    }

    /**
     * @param $fieldData
     */
    public function setFieldData($fieldData)
    {
        $this->fieldData = $fieldData;
        foreach($this->getFields() as $field) {
            $fieldName = $field->getName();
            if(array_key_exists($fieldName, $fieldData)) {
                $field->setData('value', $fieldData[$fieldName]);
            } else {
                $fieldValue = -1;
                $this->fieldData[$fieldName] = $fieldValue;
            }
        }
    }

    /**
     * @return null
     */
    public function getFieldData()
    {
        return $this->fieldData;
    }

    /**
     * @return bool|mixed
     */
    public function getPostData()
    {
        if(Mage::app()->getRequest()->isPost()) {
            $postData = array();
            foreach($this->getFields() as $field) {
                $fieldName = $field->getName();
                $postData[$fieldName] = $field->getPostValue();
            }
            return $postData;
        }

        return false;
    }

    /**
     * @return null
     */
    public function getValidatedData()
    {
        $data = $this->getFieldData();
        if(empty($data)) {
            $this->log('Empty data after validation');
        }

        // @todo: modify this to allow cleaning
        return $data;
    }

    /**
     * @return bool
     */
    public function validate()
    {
        // Initialize all form-fields using POST-values
        $this->setFieldData($this->getPostData());

        $return = true;
        // @todo: Check for security key here

        $fields = $this->getFields();
        if(!empty($fields)) {
            foreach($fields as $field) {
                if($field->validate() == false) {
                    $this->errors = array_merge($this->errors, $field->getErrors());
                    $return = false;
                }
            }
        }

        return $return;
    }

    /**
     * @return array
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * @param $name
     * @return bool
     */
    public function getFieldset($name)
    {
        if(!empty($this->fieldsets)) {
            foreach($this->fieldsets as $fieldset) {
                if($fieldset->getName() == $name) {
                    return $fieldset;
                }
            }
        }
        return false;
    }

    /**
     * @return array
     */
    public function getFieldsets()
    {
        return $this->fieldsets;
    }

    /**
     * @return array
     */
    public function getFields()
    {
        $return = array();
        if(!empty($this->fieldsets)) {
            foreach($this->fieldsets as $fieldset) {

                $fields = $fieldset->getFields();

                foreach($fields as $field) {
                    $return[] = $field;
                }
            }
        }

        if(empty($return)) {
            $this->log('No fields found');
        }

        return $return;
    }

    /**
     * @param $name
     * @return false|Mage_Core_Model_Abstract
     */
    public function getField($name)
    {
        $fields = $this->getFields();
        foreach($fields as $field) {
            if($field->getName() == $name) {
                return $name;
            }
        }

        $field = Mage::getModel('formapi/form_field_'.$name);
        if(empty($field)) $field = Mage::getModel('formapi/form_field_input');
        return $field;
    }

    /**
     * @return array
     */
    public function getFieldNames()
    {
        $fieldNames = array();
        foreach($this->getFields() as $field) {
            $fieldNames[] = $field->getName();
        }
        return $fieldNames;
    }

    /**
     * @param $postUrl
     */
    public function setPostUrl($postUrl)
    {
        $this->postUrl = $postUrl;
    }

    /**
     * @return string
     */
    public function getPostUrl()
    {
        return Mage::getUrl($this->postUrl);
    }

    /**
     * @param $formName
     */
    public function setFormName($formName)
    {
        $this->formName = $formName;
    }

    /**
     * @return null
     */
    public function getFormName()
    {
        return $this->formName;
    }

    /**
     * @param $formId
     */
    public function setFormId($formId)
    {
        $this->formId = $formId;
    }

    /**
     * @return null
     */
    public function getFormId()
    {
        if(!empty($this->formId)) {
            return $this->formId;
        }
        return $this->formName;
    }

    /**
     * @param $string
     * @param null $mixed
     * @return mixed
     */
    public function log($string, $mixed = null)
    {
        return Mage::helper('formapi')->log($string, $mixed);
    }
}
